(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{494:function(e,a,t){"use strict";t.r(a);var n=t(2),i=Object(n.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"day-6"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#day-6"}},[e._v("#")]),e._v(" Day 6")]),e._v(" "),t("p",[e._v("Nathan Quam")]),e._v(" "),t("hr"),e._v(" "),t("p",[t("a",{attrs:{href:"https://github.com/NathanMQuam/Javascript-Challenges",target:"_blank",rel:"noopener noreferrer"}},[e._v("JavaScript Challenges"),t("OutboundLink")],1)]),e._v(" "),t("hr"),e._v(" "),t("hr"),e._v(" "),t("h2",{attrs:{id:"daily-journal"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#daily-journal"}},[e._v("#")]),e._v(" Daily Journal")]),e._v(" "),t("p",[e._v("Read Intro to JS > Var, let and const and answer the following questions")]),e._v(" "),t("ol",[t("li",[t("p",[e._v("What is Scope ?\n"),t("code",[e._v('"Scope" is the different levels of hierarchy in code, with each block of code being a deeper level. A variable declared outside of any functions is at the "global" scope level, and anything within the current window can access it. While a variable declared within a function is only accessible from inside of that function. Scope is a very important part of encapsulation.')])])]),e._v(" "),t("li",[t("p",[e._v("What is Hoisting\n"),t("code",[e._v("Hoisting is when a variable is declared, but hasn't yet been assigned a value. When the computer enters into a block of code, any variables declared in the current block will be hoisted before the code starts to actually run. Until they are assigned a value, 'Var's will have the value \"Undefined\" and 'Let's will not be initialized and will not have a value, or be unassigned. 'Const's must be initialized at the time of declaration, as once they are initialized they cannot be changed. 'Const's are also hoisted to the top, but are not initialized.")])])]),e._v(" "),t("li",[t("p",[e._v("In what cases might you use let vs const vs var?\n"),t("code",[e._v("If you have a variable that you want any block of code within the variable's scope to be able to change, you can use a Var. Or you can use a Let if you want a variable to *only* be accessible within it's current scope, and not any deeper blocks of code. A Const is useful for a variable that you know is not ever going to change, but you need to read multiple times.")])])])])])}),[],!1,null,null,null);a.default=i.exports}}]);